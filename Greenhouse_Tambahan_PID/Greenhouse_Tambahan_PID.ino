#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include "DHT.h"
#define DHTTYPE DHT21 
#define relay1 D7
#define in1 D4
#define in2 D5
#define enA D6
#define pot A0

const uint16_t IR_LED = 12;
IRsend irsend(IR_LED);
const int dht_dpin = 0;
LiquidCrystal_I2C lcd(0x27, 20, 4);

DHT dht(dht_dpin, DHTTYPE); 

//=================RTC=======================

#include "RTClib.h"
RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"};

//=================SENSOR DHT21===============

int suhu, kelembaban;
float t; 
float h;
//=================PID Suhu===============
int ac_out = 0;
int last_ac = 0;
int last_kipas = 0;
unsigned long wkt;
float err,errp=0,set=26;
float iState=0; // Integrator state is the sum of all the preceding inputs
float Ki=0.22, Kp=4.32, Kd=21.6; // PID gain
float pTerm, dTerm, iTerm, uTerm;
float dt=1;
//=================PID Kelembaban===============
int kipas_out = 0;
int kipas_ac = 0;
unsigned long wktk;
float errk,errpk=0,setk=80;
float iStatek=0; // Integrator state is the sum of all the preceding inputs
float Kik=0.25, Kpk=9.5, Kdk=4.75; // PID gain
float pTermk, dTermk, iTermk, uTermk;
float dtk=1;
//================= MQTT =====================

const char* ssid = "UNDIKANet";
const char* password = "SemangatPagi:)";

#define mqttserver "broker.hivemq.com"
#define mqttport 1883

WiFiClient espClient;
PubSubClient client (espClient);

void setup() {
  // put your setup code here, to run once:
  
  Serial.begin(115200);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enA, OUTPUT);
  
  //**RTC
  if (! rtc.begin()) 
  {
    Serial.println("Couldn't find RTC");
    while (1);
  }
  if (rtc.lostPower()) 
  {
    Serial.println("RTC lost power, lets set the time!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));     // following line sets the RTC to the date & time this sketch was compiled
    
    // Set the current date, and time in the following format:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));     // This line sets the RTC with an explicit date & time, for example to set
  }
  
  dht.begin();
  delay(3000); 
  lcd.begin();
  lcd.backlight();
  pinMode(relay1, OUTPUT);

  irsend.begin();
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
#endif  // ESP8266

  //==============MQTT=====================
  WiFi.begin (ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay (500);
    Serial.println ("Connecting to WiFi..");
  }
  
  Serial.println ("Connected to the WiFi network");
  client.setServer (mqttserver, mqttport);

  while ( !client.connected()) 
  {
    client.connect("skuybos");
    Serial.print(".");
    delay(500);
  }  
}

void loop() 
{
  // put your main code here, to run repeatedly:
  ambilrtc();
  sensor();
  ambilLCD();
  ambilpid_suhu();
  ambilac();
  ambilpid_kelembaban ();
  ambilkelembaban();
  
  if (!client.connected()){
  Reconnect();
  }
  Serial.println("____________________Update________________________");
  delay(3000); 

}

void Reconnect() 
{
  while (!client.connected()) {
    Serial.print("Coba connect ke MQTT...");
    if (client.connect("client_sister")) {
      Serial.println("Connected");
    }
    else {
      Serial.print("Filed,...");
      Serial.println("Tunggu 5 detik");
      delay(5000);
    }
  }
}

void sensor()
{
  t = dht.readTemperature();  
  h = dht.readHumidity();  
  Serial.print("Suhu = ");
  Serial.print(t); 
  Serial.print("Â°C  ");
  Serial.print("Kelembaban Udara = ");
  Serial.print(h);
  Serial.println("%  ");
  char hasil[5];
  char bacot[4];
  dtostrf(t, 1, 2, hasil);
  dtostrf(h, 1, 2, bacot);
  client.publish("SuhuMaya", hasil);
  client.publish("gantibos", bacot);
}

void ambilLCD()
{
  suhu = t;
  kelembaban = h; 
  lcd.clear();
  lcd.setCursor(0,0); lcd.print("Suhu      : "); lcd.print(suhu);lcd.print("C");
  lcd.setCursor(0,1); lcd.print("Kel Udara : "); lcd.print(kelembaban); lcd.print("%");
}

void ambilrtc()
{
  DateTime now = rtc.now();
  Serial.println("Tanggal : ");
  Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);

  Serial.print(now.day(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.println(now.year(), DEC);
  Serial.print("Jam : ");

  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
  Serial.println();
  
  if(now.hour() >= 6&& now.hour() < 15)
  {
    digitalWrite(relay1, HIGH);
    Serial.println("Lampu UV ON");
  }
  else
  {
   digitalWrite(relay1, LOW);
   Serial.println("Lampu UV OFF");
  }
}

void ambilpid_suhu()
{
  err = set - t;
  pTerm = Kp * err;
  iState = iState + (err*dt);
  if(iState <= -4) iState=-4;
  if(iState >= 1)iState=1;
  iTerm = Ki * iState;
  dTerm = Kd * (err-errp)/dt;
  errp = err;
  uTerm = pTerm + iTerm + dTerm;
  ac_out = (int)(t + uTerm);
  if(ac_out<=16) ac_out = 16;
  if(ac_out>=30) ac_out = 30;
  Serial.print("Nilai AC Out = ");
  Serial.println  (ac_out);
}

void ambilac()
{
  if(ac_out != last_ac)
  {
    int khz = 38;
    if(ac_out == 16)
    {
    uint16_t rawData[273] = {3492, 3520,  894, 2572,  894, 892,  890, 896,  892, 894,894, 2574,  866, 2602,  892, 2574,  892, 2574,  866, 2602,  894, 892,  922, 866,  948, 838,  890, 2578,  894, 2574,  896, 2572,  894, 2574,  894, 892,  892, 2576,  892, 894,  922, 2546,  894, 894,  892, 892,  890, 896,  922, 864,  894, 892,  922, 2548,  892, 896,  892, 2576,  892, 896,  894, 892,  924, 862,  894, 920,  3418, 3550,  894, 2576,  894, 894,  896, 892,  896, 890,  894, 2574,  894, 2574,  894, 2576,  896, 2574,  894, 2576,  918, 868,  920, 866,  894, 896,  920, 2548,  922, 2548,  894, 2576,  892, 2576,  950, 838,  894, 2574,  894, 896,  892, 2576,  892, 894,  922, 866,  892, 894,  896, 892,  894, 894,  922, 2548,  892, 896,  922, 2548,  894, 894,  892, 894,  892, 896,  894, 922,  3444, 3528,  892, 13508,  3422, 3522,  892, 894,  894, 894,  922, 2548,  952, 836,  892, 894,  894, 894,  894, 894,  892, 894,  894, 894,  896, 892,  920, 2550,  896, 892,  892, 896,  890, 896,  894, 894,  894, 896,  894, 894,  922, 2548,  896, 2576,  894, 894,  892, 2578,  894, 2578,  892, 894,  894, 894,  894, 894,  922, 2548,  922, 2550,  918, 868,  922, 2548,  892, 2578,  894, 894,  922, 892,  3446, 3526,  894, 894,  922, 866,  894, 2576,  922, 866,  922, 868,  950, 838,  892, 896,  920, 866,  922, 868,  894, 894,  894, 2576,  894, 894,  900, 890,  894, 892,  896, 894,  916, 874,  894, 894,  922, 2550,  896, 2576,  920, 868,  894, 124,  160, 2292,  896, 2576,  894, 896,  894, 894,  894, 894,  922, 2550,  922, 2550,  920, 868,  894, 2576,  894, 2578,  894, 894,  922, 894,  3444, 3530,  918};  // UNKNOWN C31EC8C8
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz); //Note the approach used to automatically calculate the size of the array.
    }
    else if(ac_out == 17)
    {
    uint16_t rawData[271] = {3494, 3520,  920, 866,  894, 2574,  894, 892,  894, 892,  896, 2572,  892, 2576,  920, 2546,  922, 2546,  896, 892,  920, 2548,  894, 892,  894, 894,  896, 2572,  894, 2574,  894, 2574,  894, 2574,  894, 894,  894, 2574,  894, 894,  892, 2574,  894, 894,  920, 866,  894, 894,  920, 866,  894, 892,  892, 2576,  896, 892,  896, 2572,  894, 892,  892, 896,  892, 896,  894, 918,  3418, 3552,  922, 864,  894, 2576,  924, 862,  896, 890,  922, 2548,  922, 2548,  922, 2548,  894, 2574,  894, 894,  920, 2548,  920, 868,  922, 864,  922, 2548,  922, 2546,  922, 2548,  894, 2576,  894, 892,  924, 2548,  894, 892,  920, 2550,  892, 896,  894, 894,  922, 866,  894, 894,  924, 864,  894, 2576,  920, 866,  896, 2574,  894, 894,  892, 896,  896, 892,  894, 898,  3438, 3556,  892, 13488,  3442, 3524,  896, 892,  894, 894,  894, 2576,  896, 892,  894, 892,  894, 896,  892, 896,  896, 892,  924, 864,  894, 894,  896, 2574,  894, 894,  894, 894,  894, 894,  894, 894,  892, 896,  892, 896,  894, 2576,  892, 2578,  922, 866,  896, 2574,  896, 2574,  924, 864,  892, 894,  896, 892,  894, 2578,  894, 2576,  896, 892,  922, 2548,  896, 2576,  894, 894,  896, 920,  3476, 3498,  892, 896,  896, 892,  894, 2578,  922, 866,  922, 866,  922, 866,  896, 894,  896, 892,  894, 894,  896, 894,  892, 2578,  894, 896,  894, 894,  896, 894,  894, 894,  894, 894,  894, 894,  894, 2576,  892, 2578,  896, 892,  924, 2546,  896, 2576,  920, 868,  896, 892,  894, 894,  896, 2576,  894, 2578,  922, 844,  914, 2578,  924, 2548,  896, 892,  894, 900,  3442, 3556,  918};  // PANASONIC_AC32 AF23604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 18)
    {
    uint16_t rawData[271] = {3464, 3548,  924, 2542,  894, 2574,  896, 890,  922, 866,  894, 2572,  894, 2572,  894, 2572,  896, 2572,  896, 2570,  896, 2572,  924, 862,  896, 892,  894, 2574,  894, 2572,  922, 2546,  894, 2574,  922, 864,  924, 2544,  894, 892,  892, 2574,  896, 890,  894, 892,  896, 892,  894, 892,  868, 920,  898, 2572,  922, 864,  894, 2574,  896, 890,  922, 866,  924, 862,  896, 918,  3414, 3554,  900, 2570,  894, 2576,  924, 862,  896, 892,  896, 2574,  922, 2546,  896, 2572,  896, 2574,  894, 2574,  896, 2574,  894, 892,  894, 892,  896, 2574,  894, 2574,  896, 2572,  894, 2574,  922, 864,  892, 2578,  922, 866,  896, 2572,  896, 892,  896, 892,  898, 890,  896, 892,  894, 892,  894, 2576,  896, 892,  896, 2574,  894, 894,  922, 864,  896, 890,  924, 868,  3442, 3552,  920, 13458,  3410, 3554,  896, 890,  896, 892,  922, 2548,  894, 892,  896, 892,  894, 894,  896, 892,  896, 892,  896, 892,  896, 892,  896, 2574,  896, 894,  894, 892,  894, 894,  922, 864,  924, 864,  894, 894,  894, 2576,  896, 2552,  918, 892,  896, 2574,  924, 2546,  896, 892,  896, 892,  896, 890,  896, 2576,  896, 2574,  896, 894,  894, 2576,  896, 2574,  898, 890,  922, 892,  3416, 3554,  896, 892,  894, 892,  898, 2576,  894, 894,  896, 892,  898, 892,  924, 866,  896, 892,  894, 892,  924, 866,  896, 2576,  894, 894,  892, 894,  896, 892,  896, 892,  924, 864,  896, 892,  896, 2574,  896, 2574,  896, 892,  924, 2548,  894, 2576,  896, 892,  924, 864,  894, 894,  896, 2576,  896, 2576,  896, 894,  924, 2548,  922, 2548,  894, 894,  898, 920,  3414, 3560,  892};  // PANASONIC_AC32 AF33604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 19)
    {
    uint16_t rawData[271] = {3468, 3546,  924, 862,  896, 890,  894, 2572,  894, 892,  894, 2572,  866, 2600,  896, 2572,  894, 2572,  924, 862,  894, 892,  894, 2572,  910, 874,  896, 2572,  894, 2572,  894, 2572,  894, 2572,  896, 890,  926, 2542,  894, 894,  894, 2572,  896, 892,  922, 864,  924, 864,  894, 892,  924, 862,  922, 2546,  896, 890,  896, 2570,  896, 892,  894, 892,  896, 892,  896, 916,  3412, 3554,  896, 888,  896, 894,  894, 2572,  894, 892,  894, 2572,  896, 2550,  918, 2572,  868, 2600,  898, 890,  896, 890,  896, 2572,  894, 892,  896, 2572,  894, 2574,  894, 2574,  896, 2572,  894, 892,  894, 2574,  894, 894,  896, 2572,  896, 892,  926, 862,  922, 864,  898, 890,  922, 864,  896, 2572,  898, 890,  896, 2574,  896, 890,  924, 864,  894, 892,  924, 868,  3438, 3534,  946, 13470,  3392, 3552,  896, 892,  924, 862,  898, 2572,  896, 890,  896, 892,  896, 892,  922, 864,  920, 866,  896, 890,  898, 890,  896, 2572,  896, 892,  894, 892,  896, 892,  896, 890,  896, 892,  924, 864,  894, 2576,  898, 2572,  894, 894,  896, 2574,  894, 2576,  894, 892,  926, 864,  894, 892,  894, 2576,  896, 2572,  896, 892,  896, 2574,  896, 2574,  896, 892,  924, 890,  3420, 3552,  896, 894,  922, 866,  896, 2574,  896, 892,  894, 894,  894, 894,  894, 892,  896, 894,  896, 890,  894, 894,  896, 2574,  894, 894,  924, 864,  898, 890,  896, 892,  924, 862,  896, 894,  922, 2548,  896, 2574,  894, 892,  924, 2548,  896, 2574,  896, 892,  894, 894,  894, 894,  894, 2576,  894, 2576,  922, 864,  896, 2576,  896, 2574,  896, 890,  870, 924,  3438, 3556,  922};  // PANASONIC_AC32 AF43604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 20)
    {
    uint16_t rawData[271] = {3442, 3546,  896, 2570,  894, 892,  894, 2572,  920, 864,  896, 2570,  922, 2544,  894, 2572,  896, 2570,  922, 2544,  896, 890,  894, 2572,  894, 890,  894, 2572,  894, 2572,  896, 2570,  894, 2572,  922, 864,  896, 2570,  920, 866,  894, 2574,  894, 892,  894, 892,  892, 892,  922, 864,  896, 892,  922, 2544,  896, 890,  896, 2572,  898, 888,  922, 864,  894, 892,  896, 916,  3412, 3554,  894, 2572,  896, 890,  896, 2572,  894, 892,  894, 2572,  922, 2544,  896, 2572,  894, 2572,  894, 2572,  896, 890,  924, 2544,  894, 892,  896, 2572,  896, 2572,  896, 2572,  896, 2572,  894, 892,  894, 2574,  896, 890,  896, 2572,  896, 890,  894, 892,  896, 890,  894, 892,  920, 866,  896, 2574,  894, 892,  894, 2572,  898, 890,  894, 894,  894, 892,  896, 896,  3466, 3524,  894, 13476,  3408, 3554,  896, 890,  896, 892,  894, 2574,  896, 892,  894, 892,  894, 892,  922, 866,  896, 892,  894, 894,  922, 866,  896, 2572,  896, 892,  922, 864,  892, 894,  896, 892,  896, 890,  896, 892,  894, 2572,  896, 2572,  896, 892,  896, 2574,  896, 2574,  894, 894,  894, 892,  896, 890,  922, 2546,  894, 2576,  896, 892,  896, 2572,  924, 2546,  896, 892,  896, 918,  3414, 3554,  896, 892,  896, 892,  896, 2572,  924, 864,  896, 892,  894, 892,  924, 864,  894, 892,  924, 864,  896, 892,  894, 2576,  922, 864,  894, 892,  896, 892,  896, 890,  896, 892,  896, 892,  894, 2576,  894, 2574,  894, 892,  896, 2574,  922, 2546,  868, 920,  924, 864,  894, 894,  896, 2574,  896, 2574,  922, 864,  896, 2574,  894, 2574,  896, 892,  896, 918,  3416, 3558,  894};  // PANASONIC_AC32 AF53604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 21)
    {
    uint16_t rawData[271] = {3468, 3520,  894, 892,  894, 2548,  916, 2570,  896, 888,  896, 2570,  950, 2516,  894, 2572,  922, 2542,  924, 860,  896, 2572,  894, 2570,  902, 884,  896, 2570,  896, 2548,  916, 2572,  922, 2544,  894, 892,  892, 2572,  894, 892,  896, 2570,  894, 892,  922, 864,  896, 890,  866, 920,  894, 890,  926, 2542,  924, 862,  894, 2572,  896, 890,  924, 862,  892, 894,  896, 916,  3412, 3552,  894, 892,  894, 2572,  896, 2570,  896, 890,  894, 2572,  926, 2542,  894, 2572,  896, 2550,  916, 890,  924, 2544,  924, 2542,  924, 862,  896, 2572,  894, 2572,  924, 2544,  896, 2572,  920, 866,  894, 2572,  896, 892,  896, 2572,  896, 890,  866, 920,  894, 894,  894, 892,  896, 870,  916, 2572,  894, 892,  896, 2572,  916, 872,  896, 890,  894, 892,  896, 896,  3440, 3550,  920, 13448,  3410, 3552,  898, 890,  954, 834,  894, 2574,  894, 892,  924, 864,  896, 890,  896, 890,  924, 862,  924, 862,  898, 890,  896, 2572,  898, 890,  896, 892,  894, 892,  894, 892,  894, 892,  922, 864,  924, 2546,  922, 2544,  896, 892,  922, 2544,  898, 2572,  894, 892,  896, 890,  892, 894,  924, 2544,  896, 2572,  896, 890,  924, 2544,  894, 2574,  896, 870,  920, 916,  3414, 3532,  948, 860,  896, 892,  924, 2546,  894, 894,  922, 864,  896, 890,  924, 864,  896, 890,  924, 864,  926, 862,  896, 2572,  896, 892,  896, 892,  924, 862,  922, 866,  896, 892,  898, 890,  896, 2574,  898, 2572,  896, 892,  894, 2574,  924, 2546,  896, 890,  896, 890,  896, 892,  896, 2574,  896, 2574,  896, 892,  926, 2544,  896, 2574,  896, 890,  924, 890,  3414, 3558,  892};  // PANASONIC_AC32 AF63604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 22)
    {
    uint16_t rawData[273] = {3460, 3548,  898, 2568,  868, 2596,  868, 2598,  894, 890,  896, 2570,  896, 2570,  894, 2572,  924, 2518,  892, 2596,  898, 2568,  894, 2570,  926, 860,  894, 2572,  896, 2572,  922, 2542,  868, 2598,  898, 888,  896, 2572,  896, 890,  896, 2570,  894, 892,  894, 890,  894, 892,  896, 890,  896, 890,  894, 2572,  898, 888,  924, 2544,  868, 916,  896, 890,  894, 892,  896, 916,  3414, 3528,  918, 2572,  900, 2566,  896, 2570,  898, 888,  896, 2572,  898, 2570,  896, 2570,  926, 2542,  898, 2568,  870, 2598,  868, 2600,  922, 864,  896, 2572,  896, 2572,  924, 2542,  868, 2598,  896, 890,  896, 2572,  924, 862,  896, 2572,  896, 890,  896, 890,  896, 890,  896, 892,  896, 890,  896, 2572,  898, 890,  896, 2572,  896, 890,  896, 892,  868, 918,  896, 896,  3438, 3556,  892, 13476,  3388, 3576,  896, 890,  896, 126,  158, 604,  896, 2572,  898, 888,  898, 888,  896, 890,  896, 892,  898, 890,  896, 890,  896, 890,  896, 2572,  898, 888,  896, 892,  896, 892,  896, 892,  896, 890,  898, 890,  870, 2600,  870, 2598,  924, 864,  896, 2572,  896, 2574,  894, 892,  896, 892,  896, 890,  870, 2600,  896, 2572,  896, 890,  898, 2570,  898, 2570,  898, 890,  896, 918,  3390, 3576,  924, 864,  870, 918,  896, 2574,  870, 916,  896, 890,  924, 864,  898, 890,  896, 890,  896, 890,  898, 890,  896, 2574,  896, 890,  898, 890,  896, 892,  898, 890,  926, 862,  926, 862,  880, 2590,  896, 2572,  898, 890,  896, 2572,  896, 2574,  898, 890,  898, 890,  898, 890,  896, 2574,  896, 2572,  926, 862,  924, 2544,  898, 2572,  898, 890,  898, 894,  3438, 3556,  894};  // UNKNOWN FDD60DF1
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 23)
    {
    uint16_t rawData[271] = {3460, 3548,  894, 892,  894, 890,  922, 864,  894, 2570,  866, 2598,  896, 2568,  894, 2570,  896, 2570,  894, 892,  896, 888,  896, 890,  896, 2570,  896, 2570,  866, 2598,  926, 2542,  896, 2570,  894, 890,  896, 2570,  896, 890,  868, 2598,  894, 890,  896, 890,  896, 890,  894, 892,  896, 888,  896, 2570,  924, 864,  866, 2598,  896, 890,  896, 890,  896, 892,  894, 918,  3412, 3550,  898, 888,  896, 890,  894, 892,  924, 2542,  922, 2544,  894, 2572,  896, 2572,  952, 2514,  924, 862,  896, 890,  896, 890,  868, 2600,  896, 2570,  896, 2570,  924, 2544,  894, 2572,  896, 890,  924, 2544,  896, 890,  896, 2570,  896, 890,  878, 910,  896, 890,  924, 862,  894, 892,  896, 2572,  896, 888,  868, 2600,  896, 890,  868, 918,  896, 892,  896, 894,  3436, 3554,  894, 13476,  3386, 3574,  896, 890,  896, 892,  924, 2544,  896, 890,  896, 870,  914, 894,  896, 890,  896, 890,  896, 890,  924, 862,  924, 2544,  896, 890,  894, 894,  898, 890,  896, 892,  894, 892,  896, 890,  896, 2572,  924, 2542,  898, 890,  896, 2572,  896, 2572,  896, 890,  896, 868,  918, 892,  894, 2574,  924, 2544,  896, 892,  896, 2572,  896, 2572,  896, 890,  896, 916,  3414, 3532,  918, 892,  892, 894,  896, 2572,  896, 892,  894, 892,  896, 892,  892, 894,  896, 892,  894, 892,  896, 892,  894, 2574,  894, 892,  894, 894,  896, 892,  894, 894,  896, 892,  894, 894,  894, 2576,  896, 2574,  894, 892,  894, 2574,  894, 2576,  894, 894,  894, 894,  894, 894,  894, 2574,  894, 2574,  894, 894,  896, 2574,  894, 2576,  892, 896,  894, 896,  3436, 3556,  892};  // PANASONIC_AC32 AF83604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 24)
    {
    uint16_t rawData[273] = {3436, 3572,  894, 2570,  896, 888,  894, 892,  896, 2568,  896, 2570,  868, 2598,  894, 2570,  896, 2570,  896, 2570,  894, 890,  894, 890,  896, 2548,  890, 2598,  868, 2598,  896, 2546,  918, 2570,  922, 864,  896, 2548,  918, 890,  894, 2570,  896, 890,  868, 918,  924, 862,  924, 860,  868, 918,  924, 2542,  896, 890,  896, 2568,  868, 918,  898, 888,  896, 890,  896, 916,  3440, 3524,  924, 2542,  896, 890,  896, 890,  896, 2570,  896, 2572,  894, 2572,  894, 2572,  896, 2572,  894, 2572,  898, 888,  896, 888,  898, 2570,  896, 2572,  894, 2572,  896, 2570,  896, 2570,  896, 892,  868, 2598,  924, 862,  894, 2572,  896, 892,  896, 890,  896, 892,  896, 890,  896, 888,  896, 2572,  868, 918,  894, 2572,  868, 918,  896, 890,  896, 890,  868, 922,  3440, 3550,  896, 13474,  3386, 3574,  896, 890,  924, 862,  868, 2600,  896, 890,  896, 892,  898, 890,  896, 890,  894, 892,  896, 892,  868, 128,  158, 632,  924, 2542,  896, 892,  896, 890,  898, 890,  896, 890,  896, 890,  868, 920,  868, 2598,  898, 2572,  896, 890,  924, 2542,  898, 2570,  896, 890,  896, 892,  896, 890,  898, 2572,  896, 2572,  898, 890,  898, 2570,  896, 2572,  868, 918,  896, 918,  3414, 3530,  918, 892,  896, 892,  896, 2572,  896, 892,  894, 892,  924, 862,  896, 892,  894, 894,  894, 892,  896, 892,  892, 2576,  924, 864,  898, 890,  926, 862,  924, 864,  926, 862,  896, 890,  870, 2600,  870, 2598,  898, 890,  896, 2572,  896, 2572,  896, 890,  896, 892,  896, 890,  894, 2574,  898, 2572,  870, 918,  926, 2544,  896, 2572,  898, 892,  894, 918,  3414, 3558,  892};  // UNKNOWN AB4923F5
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 25)
    {
    uint16_t rawData[271] = {3436, 3572,  896, 890,  894, 2546,  918, 890,  922, 2542,  896, 2570,  896, 2570,  896, 2568,  896, 2570,  894, 890,  896, 2568,  898, 888,  922, 2542,  870, 2596,  868, 2596,  898, 2568,  926, 2542,  868, 918,  896, 2570,  898, 888,  896, 2570,  896, 890,  898, 888,  870, 916,  896, 890,  898, 888,  926, 2542,  868, 918,  896, 2570,  868, 916,  896, 890,  896, 890,  896, 916,  3390, 3574,  870, 918,  896, 2570,  896, 890,  894, 2572,  896, 2570,  896, 2572,  894, 2572,  898, 2568,  900, 888,  896, 2570,  868, 918,  896, 2572,  900, 2566,  896, 2572,  894, 2572,  900, 2568,  896, 890,  898, 2570,  896, 892,  868, 2598,  896, 890,  896, 892,  896, 890,  894, 892,  896, 890,  896, 2572,  898, 888,  898, 2570,  924, 862,  896, 890,  904, 884,  896, 894,  3440, 3528,  948, 13444,  3386, 3574,  922, 864,  896, 890,  900, 2570,  896, 890,  896, 892,  896, 888,  928, 860,  896, 890,  898, 888,  954, 834,  896, 2572,  896, 892,  896, 888,  896, 892,  868, 918,  868, 918,  896, 892,  870, 2598,  870, 2598,  896, 890,  896, 2572,  886, 2560,  946, 864,  868, 918,  868, 918,  896, 2572,  896, 2570,  870, 918,  898, 2570,  898, 2570,  912, 874,  896, 918,  3402, 3566,  924, 864,  894, 892,  896, 2572,  896, 892,  896, 892,  894, 894,  894, 892,  894, 892,  894, 892,  894, 892,  896, 2574,  894, 894,  894, 892,  894, 894,  894, 892,  894, 892,  896, 892,  892, 2576,  896, 2574,  894, 892,  894, 2574,  892, 2576,  894, 892,  896, 892,  894, 894,  894, 2574,  894, 2574,  894, 892,  894, 2574,  894, 2576,  892, 894,  894, 920,  3414, 3556,  892};  // PANASONIC_AC32 AFA3604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 26)
    {
    uint16_t rawData[271] = {3490, 3518,  890, 2574,  864, 2600,  892, 892,  892, 2574,  890, 2574,  892, 2574,  890, 2574,  864, 2602,  890, 2574,  862, 2602,  864, 920,  892, 2574,  892, 2574,  890, 2576,  892, 2572,  894, 2574,  890, 894,  892, 2574,  862, 922,  892, 2574,  870, 916,  918, 868,  890, 896,  892, 894,  894, 892,  892, 2574,  894, 892,  894, 2572,  892, 894,  890, 896,  892, 894,  892, 922,  3440, 3522,  892, 2576,  892, 2574,  892, 894,  894, 2574,  892, 2574,  892, 2574,  892, 2574,  890, 2576,  864, 2604,  890, 2576,  868, 918,  892, 2574,  864, 2602,  894, 2574,  892, 2574,  864, 2604,  892, 894,  892, 2576,  892, 894,  896, 2574,  892, 892,  894, 894,  892, 894,  892, 894,  894, 894,  892, 2576,  892, 894,  920, 2548,  890, 896,  922, 864,  892, 894,  890, 922,  3416, 3552,  890, 13500,  3390, 3548,  892, 896,  892, 894,  894, 2574,  864, 922,  864, 922,  918, 868,  864, 922,  894, 892,  890, 896,  894, 894,  892, 2576,  892, 894,  892, 894,  890, 896,  894, 894,  890, 896,  866, 922,  862, 2604,  894, 2574,  864, 922,  892, 2576,  892, 2576,  864, 924,  894, 892,  864, 922,  892, 2574,  892, 2578,  864, 922,  864, 2602,  892, 2578,  864, 922,  894, 920,  3418, 3550,  866, 922,  890, 896,  864, 2606,  892, 894,  922, 864,  894, 896,  918, 866,  894, 894,  890, 896,  894, 894,  890, 2578,  894, 894,  892, 896,  892, 896,  890, 896,  890, 896,  890, 898,  920, 2548,  892, 2576,  894, 894,  922, 2548,  892, 2576,  894, 892,  866, 922,  894, 894,  892, 2576,  892, 2576,  894, 894,  894, 2574,  920, 2550,  894, 892,  894, 922,  3416, 3554,  892};  // PANASONIC_AC32 AFB3604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 27)
    {
    uint16_t rawData[271] = {3490, 3518,  922, 862,  894, 890,  896, 2570,  894, 2570,  896, 2570,  894, 2570,  894, 2570,  896, 2568,  894, 890,  894, 892,  894, 2570,  922, 2542,  922, 2544,  894, 2570,  896, 2570,  894, 2572,  924, 862,  894, 2570,  896, 890,  896, 2570,  894, 892,  894, 892,  894, 892,  896, 890,  924, 864,  894, 2570,  952, 834,  896, 2570,  894, 892,  922, 864,  894, 892,  896, 916,  3412, 3552,  924, 860,  894, 892,  924, 2542,  922, 2524,  918, 2570,  924, 2522,  916, 2572,  896, 2570,  922, 864,  922, 864,  868, 2600,  894, 2572,  924, 2544,  896, 2570,  924, 2542,  924, 2544,  896, 890,  896, 2572,  896, 890,  896, 2572,  920, 866,  920, 866,  898, 890,  894, 890,  924, 862,  894, 2572,  896, 892,  948, 2518,  896, 890,  896, 892,  896, 890,  894, 896,  3466, 3522,  922, 13448,  3408, 3532,  944, 864,  894, 892,  894, 2572,  894, 894,  896, 890,  922, 866,  898, 888,  896, 890,  924, 862,  896, 892,  922, 2548,  894, 892,  896, 890,  896, 890,  922, 864,  896, 890,  894, 894,  920, 2548,  896, 2570,  922, 864,  896, 2572,  896, 2572,  924, 862,  924, 862,  922, 866,  894, 2574,  892, 2574,  894, 894,  894, 2572,  896, 2574,  896, 890,  896, 916,  3416, 3552,  896, 890,  922, 866,  924, 2544,  896, 892,  866, 920,  952, 836,  896, 890,  898, 890,  896, 892,  924, 864,  894, 2574,  896, 892,  898, 892,  894, 892,  922, 864,  896, 892,  896, 892,  896, 2572,  898, 2572,  894, 892,  922, 2546,  898, 2570,  894, 892,  896, 892,  894, 892,  924, 2544,  896, 2572,  894, 892,  894, 2552,  916, 2574,  896, 892,  894, 918,  3416, 3558,  918};  // PANASONIC_AC32 AFC3604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 28)
    {
    uint16_t rawData[271] = {3462, 3524,  916, 2570,  894, 890,  896, 2570,  896, 2568,  896, 2570,  894, 2570,  896, 2568,  896, 2570,  896, 2570,  896, 888,  896, 2568,  896, 2570,  924, 2540,  922, 2544,  924, 2542,  894, 2550,  946, 862,  896, 2568,  924, 860,  894, 2572,  896, 890,  894, 892,  896, 888,  896, 890,  896, 890,  896, 2570,  894, 892,  896, 2570,  896, 890,  894, 892,  894, 892,  902, 910,  3414, 3550,  894, 2572,  894, 892,  896, 2570,  892, 2574,  922, 2544,  924, 2542,  920, 2546,  896, 2572,  896, 2570,  896, 890,  896, 2570,  924, 2542,  896, 2572,  924, 2542,  896, 2570,  896, 2572,  922, 864,  892, 2572,  896, 890,  896, 2572,  894, 892,  894, 890,  896, 890,  922, 866,  894, 892,  922, 2546,  896, 890,  896, 2570,  896, 890,  924, 864,  894, 890,  896, 896,  3436, 3554,  922, 13444,  3410, 3552,  924, 862,  896, 892,  922, 2544,  896, 890,  894, 894,  924, 860,  896, 892,  896, 890,  922, 866,  922, 864,  922, 2524,  946, 862,  922, 864,  922, 864,  896, 892,  894, 892,  896, 892,  922, 2544,  896, 2572,  896, 890,  896, 2572,  896, 2572,  924, 864,  894, 890,  894, 892,  922, 2546,  894, 2574,  894, 892,  896, 2572,  896, 2572,  894, 894,  892, 920,  3418, 3550,  894, 894,  894, 892,  894, 2574,  894, 892,  894, 894,  894, 892,  894, 894,  894, 892,  894, 894,  894, 892,  896, 2574,  894, 894,  894, 892,  894, 894,  892, 894,  894, 892,  894, 894,  894, 2576,  894, 2576,  894, 894,  892, 2576,  894, 2576,  892, 894,  894, 892,  894, 894,  894, 2574,  894, 2576,  894, 894,  892, 2576,  894, 2574,  894, 894,  892, 922,  3416, 3554,  892};  // PANASONIC_AC32 AFD3604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 29)
    {
    uint16_t rawData[271] = {3462, 3544,  924, 862,  894, 2570,  892, 2572,  892, 2572,  894, 2572,  892, 2572,  922, 2542,  922, 2542,  894, 892,  922, 2542,  924, 2520,  916, 2570,  922, 2544,  896, 2570,  896, 2568,  896, 2570,  894, 892,  894, 2572,  894, 892,  894, 2570,  924, 862,  894, 892,  922, 862,  896, 890,  894, 892,  896, 2570,  894, 892,  894, 2572,  894, 892,  892, 892,  922, 864,  896, 918,  3414, 3548,  922, 864,  894, 2574,  922, 2544,  894, 2574,  896, 2568,  894, 2572,  896, 2570,  924, 2542,  896, 890,  922, 2544,  894, 2572,  894, 2572,  896, 2570,  896, 2572,  894, 2572,  896, 2570,  896, 890,  896, 2572,  898, 890,  896, 2572,  896, 890,  894, 892,  924, 864,  894, 892,  902, 884,  896, 2572,  922, 864,  894, 2572,  896, 892,  894, 892,  894, 892,  896, 896,  3434, 3556,  894, 13494,  3390, 3550,  924, 862,  922, 866,  896, 2572,  896, 892,  922, 864,  894, 894,  894, 892,  920, 866,  896, 892,  924, 862,  896, 2572,  924, 864,  892, 894,  896, 890,  896, 892,  896, 890,  894, 894,  920, 2546,  894, 2552,  916, 892,  896, 2574,  894, 2572,  922, 866,  894, 892,  924, 862,  894, 2574,  896, 2572,  894, 892,  894, 2574,  896, 2572,  896, 892,  896, 916,  3416, 3552,  894, 890,  898, 890,  896, 2572,  898, 890,  894, 894,  896, 892,  940, 848,  924, 864,  896, 890,  896, 892,  896, 2572,  894, 892,  894, 894,  894, 892,  894, 892,  894, 892,  896, 892,  896, 2574,  894, 2574,  896, 892,  922, 2546,  894, 2574,  896, 892,  896, 890,  896, 870,  918, 2574,  894, 2574,  896, 892,  924, 2544,  896, 2574,  894, 892,  924, 868,  3438, 3554,  920};  // PANASONIC_AC32 AFE3604
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
    else if(ac_out == 30)
    {
    uint16_t rawData[293] = {3462, 3546,  896, 2570,  894, 2570,  896, 2570,  892, 2572,  894, 2570,  920, 2544,  894, 2570,  892, 2574,  894, 2570,  894, 2570,  894, 2570,  894, 2572,  896, 2570,  894, 2572,  894, 2572,  894, 2570,  894, 892,  894, 2570,  894, 892,  894, 2572,  894, 892,  892, 894,  894, 892,  920, 866,  894, 892,  922, 2544,  894, 892,  894, 2572,  894, 892,  894, 892,  894, 892,  892, 920,  3412, 3550,  892, 2574,  894, 2572,  892, 2574,  892, 2574,  894, 2572,  894, 2572,  894, 2574,  892, 2574,  892, 2574,  894, 2572,  892, 2574,  892, 2574,  892, 2574,  894, 2574,  892, 2574,  892, 2574,  894, 892,  894, 2574,  892, 894,  892, 2576,  892, 894,  892, 894,  892, 894,  892, 894,  892, 892,  894, 2574,  894, 892,  894, 2574,  892, 894,  892, 894,  892, 894,  892, 900,  3466, 3522,  892, 13500,  3390, 3550,  892, 896,  864, 922,  890, 2578,  890, 898,  890, 896,  890, 896,  890, 896,  890, 896,  890, 896,  890, 896,  890, 2578,  890, 898,  888, 898,  890, 896,  890, 896,  890, 898,  890, 898,  890, 2578,  888, 2580,  890, 898,  888, 2580,  888, 2580,  888, 900,  886, 900,  886, 900,  886, 2580,  888, 2580,  862, 926,  884, 2584,  886, 2604,  862, 924,  862, 952,  3388, 3554,  886, 924,  836, 950,  860, 2608,  862, 924,  862, 926,  860, 926,  862, 926,  860, 928,  860, 926,  860, 926,  860, 2608,  860, 928,  860, 928,  860, 928,  860, 926,  860, 928,  858, 928,  858, 2610,  858, 2634,  834, 954,  834, 2634,  834, 2634,  832, 956,  832, 980,  782, 1004,  782, 2688,  782, 2688,  780, 1034,  754, 2716,  752, 2742,  200, 108,  232, 106,  94, 1068,  174, 166,  228, 1246,  200, 164,  204, 164,  204, 164,  204, 164,  202, 166,  202, 166,  204, 166,  202, 164,  202, 4164,  174};  // UNKNOWN 9025144F
    irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), khz);
    }
  last_ac = ac_out;
}
}
void ambilpid_kelembaban()
{
  errk = setk - h;
  pTermk = Kpk * errk;
  iStatek = iStatek + (errk*dtk);
  if(iStatek <= -4) iStatek=-4;
  if(iStatek >= 1)iStatek=1;
  iTermk = Kik * iStatek;
  dTermk = Kdk * (errk-errpk)/dtk;
  errpk = errk;
  uTermk = pTermk + iTermk + dTermk;
  kipas_out = (int)(h + uTermk);
  if(kipas_out<=0) kipas_out = 0;
  if(kipas_out>=1024) kipas_out = 1024;
  Serial.println("Nilai kipas out = ");
  Serial.print(kipas_out);
}
void ambilkelembaban()
{
  if(kipas_out != last_kipas)
  {
    if(kipas_out == 400)
    {
    analogWrite(enA, 400);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    }
    else if(kipas_out == 600)
    {
    analogWrite(enA, 600);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    }
    else if(kipas_out  == 800)
    {
    analogWrite(enA, 800);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    }
    else if(kipas_out  == 900)
    {
    analogWrite(enA, 900);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    }
    else if(kipas_out  == 1024)
    {
    analogWrite(enA, 1024 );
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    }
    
  last_kipas = kipas_out;
}
}
